##################################################################################
#This pipeline Deploy Database jobs and SSIS package
##################################################################################
name: MoRASP-ReportingData-Deploy
trigger: none #Disable CI triggers.
resources:
- repo: self

pool:
  vmImage: 'windows-2019' # Miscrosoft Hosted-Agent

parameters:
  - name: Finovate_Environments
    type: object
    default: ['dev']  #To Do: Eventually all environments['auk', 'dev', 'tst', 'sbx', 'crt', 'prd'] will be defined here.

  - name: ReportingDB-SQLJobs
    type: object
    default:  ['ReportingDBTransfer', 'FMMMonthBegin', 'FMMMonthEnd', 'FMMWeekly', 'DailyBillingJob', 'MonthlyBillingJob', 'MobilityReporingSysPurge', 'WeeklyBUAndFIRegJob', 'Mobile_Money_Cleanup', 'Sql_Job_Mon'] 

  - name: ReportingDB-AdhocScripts
    type: object
    default:  ['EXCutiveSSISPKG', 'SSISPKG', 'UpdateExcutiveReport', 'UpdateFMMMonth', 'UpdateFMMDaily', 'UpdateWeeklyBuCountFileDirectory', 'UpdateWeeklyVBFIListFileDirectory']

    #Build id of the build pipeline run you wish to use
  - name: BuildReleaseNumber
    displayName: string
    default: 'latest'
    
  - name: OverWrite
    type: string
    default: 'no'

stages:
  #Loops through all the environments defined within the parameters Finovate_Environments.
  - ${{ each env in parameters.Finovate_Environments }}:
      #################################################################
      #This stage genreats build package into the artifacts library.   
      #################################################################
    - stage: Retrieve_Build_Artifacts_${{ env }}
      jobs:
        - job:  Create_Build_Artifacts
          variables:
          - template:  vars-${{ env }}.yml
          - group:  MORASPDBConnections-${{ env }}

          steps:
            - checkout: none

            # Downloading Artifacts (SSIS/Job)
            - task: DownloadBuildArtifacts@0
              displayName: 'Download Artifact'
              inputs:
                buildType: 'specific'
                project: ${{ variable.ProjectGUID }}
                pipeline: ${{ variable.BuildPipelineNumber }}
                buildVersionToDownload: 'specific'
                buildId: ${{ parameters.BuildReleaseNumber }}
                downloadType: 'specific'
                itemPattern: '**/*.Zip'
                downloadPath: '$(System.ArtifactsDirectory)'
                
            # Extracting Adhoc script from Archive
            - task: ExtractFiles@1
              displayName: 'Extract ${{ variable.AdhocJobName }}'
              inputs:
                archiveFilePatterns: '$(System.ArtifactsDirectory)/$(ArtifactName)/${{ variables.AdhocJobName}}_${{ parameters.BuildReleaseNumber}}.zip'
                destinationFolder: '$(System.DefaultWorkingDirectory)'
                cleanDestinationFolder: false
                overwriteExistingFiles: true
          
          # #Deploy Adhoc script into Managed Instance
            - ${{ each Adhoc in parameters.ReportingDB_AdhocScripts }}:
              - task: AzurePowerShell@5
                displayName: 'Deploy Adhoc ${{ Adhoc }} script'
                inputs:
                  azureSubscription: ${{ variable.AzureSubscription }}
                  ScriptType: 'InlineScript'
                  Inline: 
                    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                    $access_token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.Tostring(), $null, [Microsoft.Azure.Commands.Common.Authentication.Showdialog]::Never, $null, "https://database.Windows.net").AccessToken
                    (Invoke-SQLcmd -ServerInstance $(MangedInstanceName)  -Database $(ReportingDatabase)  -AccessToken $access_token -InputFile '$(System.DefaultWorkingDirectory)\$(AdhocSQLPaths${{ Adhoc }}')
                    Write-Host "Job deploymentinitiated and access "
                  azurePowerShellVersion: 'LatestVersion'

            # Extracting SSISPackage connection string and folder details in jason
            - task: ExtractFiles@1
              displayName: 'Extract ${{ variable.SSISPackageName }}'
              inputs:
                archiveFilePatterns: "$(System.ArtifactStagingDirectory)/$(ArtifactName)/$(SSISPackageEnvFolder)_${{ parameters.BuildReleaseNumber}}.zip"
                destinationFolder: '$(System.DefaultWorkingDirectory)/$(Build_MajorVersion).$(MinorVersion).$(PatchNo).${{ parameters.BuildReleaseNumber}}.${{ variables.SSISPackageEnvFolder }}'
                cleanDestinationFolder: false
                overwriteExistingFiles: true

            # Create Folder in SSISDB
            - task: SSISCatalog@0
              displayName: 'Create Folfer in SSISDB '
              inputs:
                  configSource: 'filePath'
                  configPath: '$(System.DefaultWorkingDirectory)/$$(Build_MajorVersion).$(MinorVersion).$(PatchNo).${{ parameters.BuildReleaseNumber}}.${{ variables.SSISPackageEnvFolder }}'
                  rollBackOnError: true
                  targetServer: '$(ManagedInstanceName)'
                  authType: 'sql'
                  username: '$(LoginName_ReportingDB)'
                  password: '$(Secret_ReportingDB)'

            # Extracting SSIS Package from Archive
            - task: ExtractFiles@1
              displayName: 'Extract ${{ variable.SSISPackageName }}'
              inputs:
                archiveFilePatterns: "$(System.ArtifactsDirectory)/$(ArtifactName)/${{ variables.SSISPackageName }}_${{ parameters.BuildReleaseNumber}}.zip"
                destinationFolder: '$(System.DefaultWorkingDirectory)/$(Build_MajorVersion).$(MinorVersion).$(PatchNo).${{ parameters.BuildReleaseNumber}}.${{ variables.SSISPackageName }}'
                cleanDestinationFolder: false
                overwriteExistingFiles: true

            # Deploying SSIS package into Managed Instance
            - task: SSISDeploy@1
              displayName: 'Deploy ${{ variables.SSISPackageName }}'
              inputs:
                sourcePath: '$(System.DefaultWorkingDirectory)/$(Build_MajorVersion).$(MinorVersion).$(PatchNo).${{ parameters.BuildReleaseNumber}}.${{ variables.SSISPackageName }}'   
                destinationType: 'ssisdb'
                destinationServer: '$(SQLServer)'
                destinationPath: '$(SSISDestinationPath)'
                authType: 'sql'
                username: '$(LoginName_ReportingDB)'
                password: '$(Secret_ReportingDB)'
                whetherOverwrite: ${{ parameters.OverWrite }}
                whetherContinue: 'no'

            # Create SSISPackage connection string
            - task: SSISCatalog@0
              displayName: 'Create SSISPackage connection string '
              inputs:
                  configSource: 'filePath'
                  configPath: '$(System.DefaultWorkingDirectory)/$$(Build_MajorVersion).$(MinorVersion).$(PatchNo).${{ parameters.BuildReleaseNumber}}.${{ variables.SSISPackageEnvFolder }}\${{ variables.ConnectionsMetadata}}'
                  rollBackOnError: true
                  targetServer: '$(ManagedInstanceName)'
                  authType: 'sql'
                  username: '$(LoginName_ReportingDB)'
                  password: '$(Secret_ReportingDB)'

            # Extracting Database Job from Archive
            - task: ExtractFiles@1
              displayName: 'Extract ${{ variable.SQLJobName }}'
              inputs:
                archiveFilePatterns: "$(System.ArtifactsDirectory)/$(ArtifactName)/${{ variables.SQLJobName }}_${{ parameters.BuildReleaseNumber}}.zip"
                destinationFolder: '$(System.DefaultWorkingDirectory)/'
                cleanDestinationFolder: false
                overwriteExistingFiles: true

            # #Deploy Database Jobs into Managed Instance
            - ${{ each AppName in parameters.ReportingDB_SQLJobs }}:
              - task: AzurePowerShell@5
                displayName: 'Deploy Database Jobs ${{ AppName }} script'
                inputs:
                  azureSubscription: ${{ variable.AzureSubscription }}
                  ScriptType: 'InlineScript'
                  Inline: 
                    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
                    $access_token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.Tostring(), $null, [Microsoft.Azure.Commands.Common.Authentication.Showdialog]::Never, $null, "https://database.Windows.net").AccessToken
                    (Invoke-SQLcmd -ServerInstance $(MangedInstanceName)  -Database $(DatabaseName)  -AccessToken $access_token -InputFile '$(System.DefaultWorkingDirectory)\$(DBSQLPaths${{ AppName }}')
                    Write-Host "Job deploymentinitiated and access "
                  azurePowerShellVersion: 'LatestVersion'                                                                  